<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE hibernate-mapping PUBLIC
        "-//Hibernate/Hibernate Mapping DTD 3.0//EN"
        "http://www.hibernate.org/dtd/hibernate-mapping-3.0.dtd">

<!-- 配置与表实体对象的关系-->
<!-- package属性,填写一个包名.在元素内部凡是需要书写完整类名的书写，可以直接写-->
<hibernate-mapping package="com.fmt.hibernate">
    <!--
      class元素:配置实体与表的对应关系
      name:完整类名
      table：表名
    -->
    <class name="Customer" table="cst_customer" lazy="true" batch-size="2">
        <!-- id:配置主键映射
         name:填写主键对应属性名
         column:填写表中的主键列明
        -->
        <id name="cust_id" column="cust_id">
            <!-- 主键生成策略:主键生成策略，就是每条记录录入时，主键的生成规则
                 identity:主键自增，又数据库来维护主键值，录入时不需要指定主键
                 increment:主键自增,由hibernate来维护，每次插入前会先查询表中id最大值加+1最为先主键（存在线程安全问题）
                 sequence:Oracle中的主键生成策略
                 hilo:高低位算法，主键自增，由hibernate来维护，开发不使用
                 native:hilo+sequence+identity ，三选一策略。如果自持主键自增就使用identity 如果支持Oracle则使用sequence...
                 uuid：产生随机字符串，主键类型必须是string类型
                 assigned:自然主键生成策略，hibernate不会管理主键值，由开发人员自己录入，如果不设置id 就会报错
            -->
            <generator class="native"></generator>
        </id>
        <!--property 除id之外的普通属性映射
           name：属性名
           column(可选）：填写；列名默认值是属性名
           type(可选） 填写属性的类型。hibernate会自动检测试题的属性类型
                       每个类型有三种添发：java类型|hibernate类型|数据库类型
           not-null(可选）:配置该属性(列)不为空，默认值为false
           length（可选):配置数据库中列的长度，默认值;当前数据库中的最大长度
        -->
        <property name="cust_name" column="cust_name">
            <!--<column name="cust_name" sql-type="varchar"></column>-->
        </property>
        <property name="cust_source" column="cust_source"></property>
        <property name="cust_industry" column="cust_industry"></property>
        <property name="cust_level" column="cust_level"></property>
        <property name="cust_linkman" column="cust_linkman"></property>
        <property name="cust_phone" column="cust_phone"></property>
        <property name="cust_mobile" column="cust_mobile"></property>

        <!--集合，一对多关系，在配置文件中配置-->
        <!--
          name是添集合属性名
          key元素 中column 填写外键列名
          class属性 与我关联的对象完整类名
        -->
        <!--
          级联操作：cascade
             save-update:级联保存更新
             delete：级联删除
             all上述都有
        -->
        <!--
            inverse属性:配置关系是否维护。
            true:customer不维护
            false（默认值):customer维护关系

            inverse属性：性能优化。提高关系维护的性能。
            原则：无论怎么放弃，总有一方必须要维护关系，
            一对多关系中：一的一方放弃，多的一方不能放弃
        -->
        <!--
           lazy属性：决定延迟加载
           true(默认值),懒加载
           false:立即加载
           extra:这种配置和配置为lazy=true是一样的，但它的好处在于调用size/contains等方法时，并不查询整个集合的数据，而是发送一条sql语句来处理，只有真正在使用时才全部去查询整个集合



           fetch属性:决定加载策略，使用什么类型的sql语句加载集合数据
           select(默认值）：单表查询加载
           join：使用多表查询加载集合（如果设置了join，查询是一次性的，lazy设置无效）
           subselect：使用子查询加载集合

        -->
        <!--
        batch-size:抓取数据3条
        -->
        <set name="linkMens" batch-size="3">
            <!--指定外键列明-->
            <key column="lkm_cust_id"></key>
            <one-to-many class="LinkMan"/>
        </set>
    </class>
</hibernate-mapping>